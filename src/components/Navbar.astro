---
import Logo from '../components/Logo.astro';
import SearchBar from '../components/SearchBar.astro';
import Account, { SessionTokenInvalideError } from '../model/users/Account';
import Buyer from '../model/users/Buyer';
import Company from '../model/users/Company';

export interface Props {
	page_name?: string;
	search_bar?: boolean;

}

const { page_name, search_bar} = Astro.props;
// Recuperer les infos de l'utilisateur
let account: Account | Buyer | Company;
const cookies = Astro.request.headers.get('cookie');
if (cookies) {
	const token = (cookies.endsWith(';') ? cookies : cookies + ';').match(
		/token=([^;]*);/
	); // Recuperer le token de session
	try {
		account = await Account.getBySession(token[1]); // Recuperer l'utilisateur
		if (account.isCompany()) account = await Company.getFromAccount(account);
		else account = await Buyer.getFromAccount(account);
	} catch (SessionTokenInvalideError) {
		account = null; // Si le token est invalide, on ne recupere pas l'utilisateur
	}
}
---

<header>
	<a id="logo" href="/" aria-label="Retour au menu principal"><Logo /></a>

	<h2>{page_name}</h2>

	<nav>
		<slot />
	</nav>

	<div id="right">
		{search_bar && <SearchBar />*}
		{
			account ? ( // Si l'utilisateur est connecte
				account.isCompany() ? (
					// Settings acheteurs
					<a class="button hbox" href="/settings" style="align-items: center;">
						<div class="user_icon_container">
							<img src="/img/icons/user.svg" alt="User" />
						</div>
						{account.toString()}
					</a>
				) : (
					// Settings entreprise
					<a
						class="button hbox"
						href="/dashboard/settings"
						style="align-items: center;"
					>
						<div class="user_icon_container">
							<img src="/img/icons/user.svg" alt="User" />
						</div>
						{account.toString()}
					</a>
				)
			) : (
				// Si l'utilisateur n'est pas connecte
				<>
					<a class="button" id="signup" href="/register">
						{' '}
						Creer un compte
					</a>
					<a class="button" id="login" href="/login">
						{' '}
						Connectez-vous
					</a>
				</>
			)
		}
	</div>
</header>

<style>
	body {
		margin: 0px;
		padding: 0px;
	}

	header {
		display: flex;
		align-items: center;
		justify-content: space-between;
		background-color: var(--theme-secondary);

		max-width: 100%;
		padding: 8px 1rem;

		flex-grow: 0;
		flex-shrink: 0;
	}

	#logo {
		scale: 0.9;
		width: 16rem;
	}

	#right {
		display: flex;
		justify-content: flex-end;
		align-items: center;

		width: 100%;
	}

	.button {
		text-decoration: none;
		font-size: 1.5rem;
		padding: 0.5rem 1rem;
		margin: 0.5rem;
		border-radius: 0.5rem;
		background-color: var(--theme-button);
		color: inherit;
	}

	.button:hover {
		filter: brightness(1.2);
	}

	.user_icon_container {
		width: 40px;
		height: 40px;
		border-radius: 50%;
		background-color: whitesmoke;
		display: flex;
		align-items: center;
		justify-content: center;
		margin-right: 1rem;
		overflow: hidden;
	}

	.user_icon_container img {
		width: 50px;
		height: 50px;
		transform: translateY(8px);
	}
</style>
