---
import Layout from '../../layouts/Layout.astro';
import UserSetting from '../../components/UserSetting.astro';
import Buyer from '../../model/users/Buyer';
import { getBuyerBySession } from '../../model/Utilitaire';
import {
	AccountTypeMismatch,
	SessionTokenInvalideError,
} from '../../model/users/Account';
import Notification from '../../model/Notification';
import Notif from '../../components/Notif.astro';

let buyer: Buyer;
try {
	buyer = await getBuyerBySession(Astro.request.headers);
} catch (e) {
	if (e instanceof AccountTypeMismatch)
		return Astro.redirect('/dashboard/settings');
	else if (!(e instanceof SessionTokenInvalideError)) console.error(e);
	return Astro.redirect('/login');
}

const mail = buyer.getEmail();
const lastName = buyer.getNom();
const firstName = buyer.getPrenom();
const notifications = await Notification.getUserNotifications(buyer.getId());
---

<Layout title="Replikas" no_searchbar>
	<div class="main-wrapper">
		<aside class="sideBar">
			<div>
				<h2>Paramètres utilisateur</h2>
				<ul>
					<li><a href="#monCompte">Mon compte</a></li>
					<li><a href="#accessibilite">Accessibilité</a></li>
				</ul>
				<form action="/action/disconnect">
					<input id="deconnection" type="submit" value="Se déconnecter" />
				</form>
			</div>
		</aside>
		<main class="parameters">
			<h2 id="monCompte">Mon compte</h2>
			<UserSetting
				parametre="Nom"
				value={lastName}
				lien="/settings/modify-name"
			/>
			<UserSetting
				parametre="Prénom"
				value={firstName}
				lien="/settings/modify-name"
			/>
			<UserSetting
				parametre="Adresse mail"
				value={mail}
				lien="/settings/modify-email"
			/>
			<UserSetting parametre="Mot de passe" lien="/settings/recover-password" />
			<h2 id="accessibilite">Accessibilité</h2>
			<UserSetting parametre="Taille de la police" value="x1" />

		</main>
		<aside class="notifications">
			<h2>Notifications</h2>
			{notifications.map((notif) => <Notif notif={notif} />)}
		</aside>
	</div>
</Layout>

<style>
	* {
		color: inherit;
		text-decoration: none;
		list-style: none;
		padding: 0;
	}

	.main-wrapper {
		display: grid;
		grid-template-areas: 'sidebar main notifications';
		grid-template-columns: minmax(0, 20rem) minmax(0, 2.5fr) minmax(0, 30rem);
		gap: 20px;
	}

	.main-wrapper > * {
		background-color: var(--theme-secondary);

		margin: 10px;

		text-align: center;
	}

	/*-------------------Side bar---------------------*/

	.sideBar {
		position: sticky;
		top: 0;

		grid-area: sidebar;
		overflow: auto;

		max-height: 100vh;
	}

	.sideBar li {
		padding: 5px 0;
		margin: 10px 0;
	}

	#deconnection {
		background-color: transparent;
		border: none;

		color: var(--theme-button);
		font-size: 22px;
		font-weight: bold;
	}
	#deconnection:hover {
		filter: brightness(1.2);
		cursor: pointer;
	}

	/*-------------------Parametres---------------------*/

	.parameters {
		grid-area: main;

		padding: 0 20% 50px 20%;
	}
	ul li:hover {
		color: red;
		transition: 0.5s ease;
		scale: 1.2;
	}

	/*-------------------Notifications---------------------*/

	.notifications {
		position: sticky;
		top: 0;

		grid-area: notifications;
		overflow: auto;

		max-height: 100vh;
	}
</style>
